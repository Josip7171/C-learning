/*
Kornjača se sprema na još jednu utrku protiv Zeca, ovaj put na stazi s preprekama. Staza je podijeljena na segmente označene prirodnim brojevima, redom od $1$ (startni segment) do $30000$ (ciljni segment). Na svakom segmentu (osim startnog i ciljnog) može se ugraditi po jedna prepreka, koja ispunjava cijeli segment.

Kornjača je razmjestila $N$ prepreka po stazi i zapisala oznake segmenata s preprekama. Nakon toga pretrčava stazu. Kada naiđe na prepreku, Kornjača je, naravno, mora preskočiti. Kako čuva snagu, Kornjača radi što kraće skokove. Međutim, ako su dvije prepreke na susjednim segmentima, Kornjača ne može skočiti između njih, nego ih mora preskočiti jednim skokom. Dakle, Kornjača će odskočiti sa zadnjeg segmenta ispred prepreke i doskočiti na prvi sljedeći segment na kojem nema prepreke.

Zec, naravno, želi sabotirati Kornjaču pa želi znati koliko je skokova Kornjača napravila, koliko segmenata je bio dug najdulji Kornjačin skok (ne brojeći odskočni i doskočni segment skoka), te oznaku prve prepreke (one najbliže startu) koju je preskočila u prvom najduljem skoku na stazi.

ako je samo prvi red izlaza ispravan, a ostali nisu, test primjer donosi 50% bodova (ako prvi red nije ispravan, test primjer ne donosi bodove bez obzira na ispravnost ostalih redova);
u test primjerima vrijednima 50% bodova, duljina najduljeg skoka će biti najviše dva segmenta.
Ulazni podaci
prirodan broj $N$ ($1 \leq N \leq 20$), broj prepreka na stazi;
$N$ različitih prirodnih brojeva, jedan ispod drugog – oznake segmenata na kojima se nalazi prepreka; oznake segmenata će biti između $2$ i $29999$, uključivo;
Izlazni podaci
prvi red izlaza: prirodan broj – broj skokova koji je Kornjača napravila;
drugi red izlaza: prirodan broj – duljina najduljeg skoka koji je Kornjača morala napraviti, u segmentima (bez odskočnog i doskočnog);
treći red izlaza: prirodan broj – oznaka segmenta prve prepreke (one s najmanjom oznakom) preko koje je Kornjača preskočila u prvom od najduljih skokova na stazi;
Primjeri test podataka
Ulaz
Copy
1
5
Izlaz
Copy
1
1
5
Ulaz
Copy
10
100
13
1003
7000
5000
1004
101
7
8
6000
Izlaz
Copy
7
2
7
*/



#include <iostream>


void sort_it(int arr[], int size);

int main(){
	int size = 0;
	std::cin >> size;
	int *obstacles = new int [size];
	for(int i = 0; i < size; i++){
		std::cin >> obstacles[i];
	}

	sort_it(obstacles, size);

	//za ispis, provjeru izlaza, izbrisati nakon zavrsetka
	//for(int i = 0; i< size; i++)
	//	std::cout << obstacles[i]<< ", ";


	int counter = 1, bigest_jump = 1, bigest_jump_location = obstacles[0], jumps = 0;
	for(int i = 0; i < size;){
		for(int j = i + 1; j < size; j++){
			if(obstacles[i] == obstacles[j] - counter){
				counter++;
			}
			else j = size;		
		}
		if(bigest_jump < counter){
			bigest_jump = counter;
			bigest_jump_location = obstacles[i];
		}
		i += counter;
		counter = 1;
		jumps++;
	}


	std::cout << jumps << std::endl << bigest_jump << std::endl << bigest_jump_location;
}


void sort_it(int arr[], int size){
	int temp = 0;
	for(int i = 0; i < size; i++){
		//temp = arr[i];
		for(int j = 0; j < size; j++){
			if(arr[i] < arr[j]){
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}
}